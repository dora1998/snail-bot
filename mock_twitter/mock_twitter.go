// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dora1998/snail-bot/commands (interfaces: TwitterClient)

// Package mock_twitter is a generated GoMock package.
package mock_twitter

import (
	twitter "github.com/dghubble/go-twitter/twitter"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTwitterClient is a mock of TwitterClient interface
type MockTwitterClient struct {
	ctrl     *gomock.Controller
	recorder *MockTwitterClientMockRecorder
}

// MockTwitterClientMockRecorder is the mock recorder for MockTwitterClient
type MockTwitterClientMockRecorder struct {
	mock *MockTwitterClient
}

// NewMockTwitterClient creates a new mock instance
func NewMockTwitterClient(ctrl *gomock.Controller) *MockTwitterClient {
	mock := &MockTwitterClient{ctrl: ctrl}
	mock.recorder = &MockTwitterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTwitterClient) EXPECT() *MockTwitterClientMockRecorder {
	return m.recorder
}

// CreateFavorite mocks base method
func (m *MockTwitterClient) CreateFavorite(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFavorite", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFavorite indicates an expected call of CreateFavorite
func (mr *MockTwitterClientMockRecorder) CreateFavorite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFavorite", reflect.TypeOf((*MockTwitterClient)(nil).CreateFavorite), arg0)
}

// IsFollwing mocks base method
func (m *MockTwitterClient) IsFollwing(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFollwing", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFollwing indicates an expected call of IsFollwing
func (mr *MockTwitterClientMockRecorder) IsFollwing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFollwing", reflect.TypeOf((*MockTwitterClient)(nil).IsFollwing), arg0)
}

// Reply mocks base method
func (m *MockTwitterClient) Reply(arg0 string, arg1 int64) *twitter.Tweet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reply", arg0, arg1)
	ret0, _ := ret[0].(*twitter.Tweet)
	return ret0
}

// Reply indicates an expected call of Reply
func (mr *MockTwitterClientMockRecorder) Reply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockTwitterClient)(nil).Reply), arg0, arg1)
}

// Tweet mocks base method
func (m *MockTwitterClient) Tweet(arg0 string) *twitter.Tweet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tweet", arg0)
	ret0, _ := ret[0].(*twitter.Tweet)
	return ret0
}

// Tweet indicates an expected call of Tweet
func (mr *MockTwitterClientMockRecorder) Tweet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tweet", reflect.TypeOf((*MockTwitterClient)(nil).Tweet), arg0)
}
