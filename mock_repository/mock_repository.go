// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dora1998/snail-bot/commands (interfaces: Repository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	repository "github.com/dora1998/snail-bot/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockRepository) Add(arg0 string, arg1 time.Time, arg2 string) *repository.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(*repository.Task)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockRepositoryMockRecorder) Add(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRepository)(nil).Add), arg0, arg1, arg2)
}

// GetAllTasks mocks base method
func (m *MockRepository) GetAllTasks() []repository.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks")
	ret0, _ := ret[0].([]repository.Task)
	return ret0
}

// GetAllTasks indicates an expected call of GetAllTasks
func (mr *MockRepositoryMockRecorder) GetAllTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockRepository)(nil).GetAllTasks))
}

// GetTaskByBody mocks base method
func (m *MockRepository) GetTaskByBody(arg0 string) *repository.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByBody", arg0)
	ret0, _ := ret[0].(*repository.Task)
	return ret0
}

// GetTaskByBody indicates an expected call of GetTaskByBody
func (mr *MockRepositoryMockRecorder) GetTaskByBody(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByBody", reflect.TypeOf((*MockRepository)(nil).GetTaskByBody), arg0)
}

// GetTaskById mocks base method
func (m *MockRepository) GetTaskById(arg0 string) *repository.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskById", arg0)
	ret0, _ := ret[0].(*repository.Task)
	return ret0
}

// GetTaskById indicates an expected call of GetTaskById
func (mr *MockRepositoryMockRecorder) GetTaskById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskById", reflect.TypeOf((*MockRepository)(nil).GetTaskById), arg0)
}

// Remove mocks base method
func (m *MockRepository) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockRepositoryMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockRepository)(nil).Remove), arg0)
}
